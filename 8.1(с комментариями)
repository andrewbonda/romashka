#include <iostream> // Подключение стандартной библиотеки ввода-вывода
using namespace std; // Использование пространства имен std

// Константы, определяющие максимальные размеры матрицы
const int max_M = 100; // Максимальное количество строк
const int max_N = 100; // Максимальное количество столбцов

/**
 * Функция f: находит индекс минимального элемента в строке.
 * @param a - массив чисел (строка матрицы)
 * @param N - количество элементов в строке
 * @return индекс минимального элемента в строке
 */
int f(double a[], int N) {
    int minIndex = 0; // Предполагаем, что первый элемент является минимальным
    for (int i = 1; i < N; i++) { // Проходим по всем элементам строки
        if (a[i] < a[minIndex]) { // Если найден меньший элемент
            minIndex = i; // Обновляем индекс минимального элемента
        }
    }
    return minIndex; // Возвращаем индекс минимального элемента
}

/**
 * Функция swapRows: меняет местами две строки матрицы.
 * @param matrix - двумерная матрица
 * @param row1 - индекс первой строки
 * @param row2 - индекс второй строки
 * @param N - количество столбцов
 */
void swapRows(double matrix[max_M][max_N], int row1, int row2, int N) {
    for (int j = 0; j < N; j++) { // Проходим по каждому столбцу
        double temp = matrix[row1][j]; // Сохраняем значение из первой строки
        matrix[row1][j] = matrix[row2][j]; // Копируем значение из второй строки в первую
        matrix[row2][j] = temp; // Копируем сохраненное значение во вторую строку
    }
}

int main() {
    int M, N; // Переменные для хранения количества строк и столбцов

    // Ввод размеров матрицы
    cout << "Введите количество строк (M): ";
    cin >> M;
    cout << "Введите количество столбцов (N): ";
    cin >> N;

    double matrix[max_M][max_N]; // Создаем матрицу размером MxN

    // Ввод элементов матрицы
    cout << "Введите элементы матрицы:\n";
    for (int i = 0; i < M; i++) { // Цикл по строкам
        for (int j = 0; j < N; j++) { // Цикл по столбцам
            cin >> matrix[i][j]; // Ввод значения для каждой ячейки
        }
    }

    /**
     * Сортировка строк матрицы методом гномьей сортировки.
     * Строки сортируются по индексу минимального элемента в каждой строке.
     */
    int i = 1; // Начинаем с первой строки
    while (i < M) { // Пока не обработаны все строки
        if (i == 0) { // Если текущая строка первая
            i++; // Переходим к следующей строке
        }
        if (f(matrix[i - 1], N) <= f(matrix[i], N)) { // Если порядок строк правильный
            i++; // Переходим к следующей строке
        } else { // Если порядок строк нарушен
            swapRows(matrix, i - 1, i, N); // Меняем местами строки
            i--; // Возвращаемся к предыдущей строке для проверки
        }
    }

    // Вывод отсортированной матрицы
    cout << "Матрица после сортировки" << endl;
    for (int i = 0; i < M; i++) { // Цикл по строкам
        for (int j = 0; j < N; j++) { // Цикл по столбцам
            cout << matrix[i][j] << " "; // Вывод элемента матрицы
        }
        cout << endl; // Переход на новую строку после вывода всей строки
    }

    return 0; // Успешное завершение программы
}
