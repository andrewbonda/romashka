#include <iostream> // Подключение стандартной библиотеки ввода-вывода
#include <vector>   // Подключение библиотеки для использования динамических массивов (vector)
#include <cmath>    // Подключение библиотеки для математических функций (atan2, sqrt)
using namespace std; // Использование пространства имен std

// Структура Point для хранения координат точки
struct Point {
    double x, y; // Координаты точки: x и y
};

/**
 * Функция Angle: вычисляет угол между точкой и началом координат.
 * @param p - объект структуры Point
 * @return значение угла в радианах
 */
double Angle(const Point& p) {
    return atan2(p.y, p.x); // atan2 вычисляет угол между точкой и осью X
}

/**
 * Функция Distance: вычисляет расстояние от точки до начала координат.
 * @param p - объект структуры Point
 * @return расстояние от точки до начала координат
 */
double Distance(const Point& p) {
    return sqrt(p.x * p.x + p.y * p.y); // Формула для вычисления расстояния по теореме Пифагора
}

/**
 * Метод пузырька для сортировки точек.
 * Сортирует точки сначала по возрастанию угла, затем при равных углах — по расстоянию.
 * @param points - вектор точек для сортировки
 */
void bubbleSort(vector<Point>& points) {
    int n = points.size(); // Количество точек в векторе
    for (int i = 0; i < n - 1; ++i) { // Внешний цикл проходит по всем элементам
        for (int j = 0; j < n - i - 1; ++j) { // Внутренний цикл сравнивает соседние элементы
            double angle1 = Angle(points[j]);       // Угол первой точки
            double angle2 = Angle(points[j + 1]);  // Угол второй точки

            // Если угол первой точки больше угла второй,
            // или если углы равны, но расстояние первой точки больше расстояния второй,
            // то меняем точки местами.
            if (angle1 > angle2 || 
                (angle1 == angle2 && Distance(points[j]) > Distance(points[j + 1]))) {
                swap(points[j], points[j + 1]); // Обмен значений двух точек
            }
        }
    }
}

int main() {
    int numPoints; // Переменная для хранения количества точек

    // Запрашиваем количество точек у пользователя
    cout << "Введите количество точек: ";
    cin >> numPoints;

    // Проверяем, что количество точек положительное
    if (numPoints <= 0) {
        cerr << "Количество точек должно быть положительным числом!" << endl;
        return 1; // Выход из программы с кодом ошибки
    }

    vector<Point> points(numPoints); // Создаем вектор точек заданного размера

    // Запрашиваем координаты каждой точки
    cout << "Введите координаты точек (x y):" << endl;
    for (int i = 0; i < numPoints; ++i) {
        cout << "Точка " << i + 1 << ": "; // Выводим номер текущей точки
        cin >> points[i].x >> points[i].y; // Вводим координаты точки
    }

    // Сортируем точки методом пузырька
    bubbleSort(points);

    // Выводим отсортированные точки
    cout << "\nОтсортированные точки:\n";
    for (const auto& p : points) { // Проходим по каждому элементу вектора
        cout << "(" << p.x << ", " << p.y << ")\n"; // Выводим координаты точки
    }

    return 0; // Успешное завершение программы
}
