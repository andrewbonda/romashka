#include <iostream> // Подключение библиотеки для работы с вводом-выводом
#include <fstream>  // Подключение библиотеки для работы с файлами
using namespace std; // Использование пространства имен std

/**
 * Функция complex: проверяет, является ли число составным.
 * Составное число — это число, которое больше 1 и не является простым (имеет делители, кроме 1 и самого себя).
 * @param num - проверяемое число
 * @return true, если число составное, иначе false
 */
bool complex(int num) {
    if (num <= 1) return false; // Числа меньше или равные 1 не являются составными
    for (int i = 2; i * i <= num; ++i) { // Проверяем делители от 2 до sqrt(num)
        if (num % i == 0) return true; // Если есть делитель, число составное
    }
    return false; // Если делителей нет, число не является составным
}

/**
 * Функция complex_numbers: рекурсивно считывает числа из файла и вычисляет сумму составных чисел.
 * @param file - ссылка на объект ifstream, связанный с файлом
 * @return сумма всех составных чисел из файла
 */
int complex_numbers(ifstream& file) {
    int number; // Переменная для хранения текущего числа из файла

    // Попытка считать число из файла
    if (!(file >> number)) { 
        return 0; // Если чисел больше нет, возвращаем 0
    }

    // Если число составное, добавляем его к текущей сумме, иначе добавляем 0
    int currentSum = complex(number) ? number : 0;

    // Рекурсивный вызов для следующего числа
    return currentSum + complex_numbers(file);
}

int main() {
    string filename = "numbers.txt"; // Имя файла с числами
    ifstream file(filename); // Открываем файл для чтения

    // Проверяем, успешно ли открылся файл
    if (!file) { 
        cerr << "Ошибка открытия файла: " << filename << endl; // Выводим сообщение об ошибке
        return 1; // Выходим из программы с кодом ошибки
    }

    // Вызываем функцию для подсчета суммы составных чисел
    int result = complex_numbers(file);

    // Выводим результат
    cout << "Сумма составных чисел в файле: " << result << endl;

    file.close(); // Закрываем файл после использования
    return 0; // Успешное завершение программы
}
